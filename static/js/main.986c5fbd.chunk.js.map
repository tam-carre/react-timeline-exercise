{"version":3,"sources":["Timeline/Timeline.tsx","Timeline/placeholderEvents.ts","App.tsx","index.tsx"],"names":["Timeline","events","className","map","evt","i","time","title","description","position","popIn","key","TimelineEvent","props","getNewPosition","pipe","head","O","flow","prop","getNewKey","add","getPlaceholderEvent","a","getQuote","author","content","getCurrentTime","Date","toLocaleTimeString","Fetcher","handle","discardRest","run","authorAndContent","t","App","_id","tags","authorSlug","length","dateAdded","dateModified","initial","max","initialEvts","useState","setEvents","event","newEvt","newEvtList","prepend","slice","useTimelineEvents","addEvent","useEffect","interval","setInterval","clearInterval","style","maxWidth","margin","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+RASaA,EAAW,SAAC,GAAD,IAAEC,EAAF,EAAEA,OAAF,IAAUC,iBAAV,MAAsB,GAAtB,SACtB,oBAAIA,UAAW,gBAAkBA,EAAjC,SACGD,EAAOE,KAAK,SAACC,EAAKC,GAAN,OACX,cAAC,EAAD,CACEC,KAAMF,EAAIE,KACVC,MAAOH,EAAIG,MACXC,YAAaJ,EAAII,YACjBC,SAAUL,EAAIK,SAEdC,MAAa,IAANL,GADFD,EAAIO,WAiCXC,EAAgB,SAACC,GAAD,OACpB,oBAAIX,UAAS,6BAAwBW,EAAMJ,UAA3C,SACE,0BAASP,UAAWW,EAAMH,MAAQ,SAAW,GAA7C,UACE,mCACE,sBAAMR,UAAU,iBAAhB,SAAkCW,EAAMN,QACxC,sBAAML,UAAU,gBAAhB,SAAiCW,EAAMP,UAExCO,EAAML,kBAKPM,EAAiB,SAACb,GAAD,OAAiDc,eACtEC,eAAMf,GACNgB,MAAOC,eACLC,eAAM,aACN,SAAAV,GAAQ,MAAiB,UAAbA,EAAuB,OAAS,YAE9CQ,aAAa,iBAAM,aAGfG,EAAY,SAACnB,GAAD,OAA0Cc,eAC1DC,eAAMf,GACNgB,MAAOC,eACLC,eAAM,OACNE,cAAK,KAEPJ,aAAY,kBAAM,O,gBCzEPK,EAAmB,uCAAG,gCAAAC,EAAA,sEACDC,IADC,uBAC1BC,EAD0B,EAC1BA,OAAQC,EADkB,EAClBA,QADkB,kBAE1B,CACLpB,KAAMqB,IACNpB,MAAOkB,EACPjB,YAAakB,IALkB,2CAAH,qDASnBC,EAAiB,kBAAM,IAAIC,MAAQC,sBAM1CL,EAAQ,uCAAG,gCAAAD,EAAA,4DACE,iCADF,SAGP,IAAIO,UAFK,kCAGZC,OAAQ,KAAK,kBAAwB,CAACN,OAAzB,EAAEA,OAA+BC,QAAjC,EAAUA,YACvBM,aAAa,iBAAO,CACnBP,OAAQ,qBACRC,QAAS,wCAEVO,MATU,0CAERC,EAFQ,uBAWRA,GAXQ,2CAAH,qDAcRA,EAAmBC,IAAQ,CAC/BV,OAAQU,IACRT,QAASS,MC/BEC,GDkCCD,IAAgB,CAACD,EAAkBC,IAAQ,CACvDE,IAAKF,IACLG,KAAMH,IAASA,KACfI,WAAYJ,IACZK,OAAQL,IACRM,UAAWN,IACXO,aAAcP,QCxCG,WACjB,MFmB+B,SAAC,GAAyC,IAAxCQ,EAAuC,EAAvCA,QAAuC,IAA9BC,WAA8B,MAAxB,EAAwB,EAClEC,EAAcF,EAChB,CAAC,2BAAIA,GAAL,IAAchC,IAAK,EAAGF,SAAU,WAChC,GACJ,EAA4BqC,mBAAiCD,GAA7D,mBAAO5C,EAAP,KAAe8C,EAAf,KAWA,MAAO,CAAC9C,EATiB,SAAC+C,GACxB,IAAMvC,EAAaK,EAAgBb,GAC7BU,EAAaS,EAAWnB,GACxBgD,EAAM,2BAAWD,GAAX,IAAkBvC,WAAUE,QAClCuC,EAAanC,eAAMd,EAAQkD,kBAASF,GAASG,gBAAO,EAAPA,CAAWR,IAE9DG,EAAWG,KE/BcG,CAAmB,CAACV,QAAS,CACtDrC,KAAMqB,IACNpB,MAAO,MACPC,YAAa,+DAHf,mBAAOP,EAAP,KAAeqD,EAAf,KAYA,OANAC,qBAAW,WACT,IACMC,EAAaC,YADH,uCAAG,sBAAAlC,EAAA,kEAAY+B,EAAZ,SAA4BhC,IAA5B,uGAAH,qDAC4B,KAC5C,OAAO,kBAAMoC,cAAeF,OAI5B,sBAAMG,MAAO,CAACC,SAAU,KAAMC,OAAQ,QAAtC,SACE,cAAC,EAAD,CAAU5D,OAAQA,QCfxB6D,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.986c5fbd.chunk.js","sourcesContent":["import './Timeline.scss'\nimport {useState} from 'react'\nimport { add } from 'fp-ts-std/Number'\nimport {prepend, head} from 'fp-ts/lib/Array'\nimport {slice} from 'fp-ts-std/Array'\nimport {prop} from 'fp-ts-ramda'\nimport * as O from 'fp-ts/lib/Option'\nimport {flow, pipe} from 'fp-ts/lib/function'\n\nexport const Timeline = ({events, className = \"\"}: TimelineProps) => (\n  <ul className={\"tam-timeline \" + className}>\n    {events.map ((evt, i) => (\n      <TimelineEvent\n        time={evt.time}\n        title={evt.title}\n        description={evt.description}\n        position={evt.position}\n        key={evt.key}\n        popIn={i === 0}\n      />\n    ))}\n  </ul>\n)\n\nexport const useTimelineEvents = ({initial, max = 5}: EventsHookProps) => {\n  const initialEvts = initial\n    ? [{...initial, key: 0, position: 'right' as const}]\n    : []\n  const [events, setEvents] = useState <InternalEventProps[]> (initialEvts)\n\n  const addTimelineEvent = (event: EventProps) => {\n    const position   = getNewPosition (events)\n    const key        = getNewKey (events)\n    const newEvt     = {...event, position, key} as InternalEventProps\n    const newEvtList = pipe (events, prepend (newEvt), slice (0) (max))\n\n    setEvents (newEvtList)\n  }\n\n  return [events, addTimelineEvent] as const\n}\n\nexport interface EventProps {\n  time: string\n  title: string\n  description: string\n}\n\n///////////////////////////////////////////////////////////////////////////////\n\nconst TimelineEvent = (props: InternalEventProps) => (\n  <li className={`tam-timeline-event ${props.position}`}>\n    <article className={props.popIn ? 'pop-in' : ''}>\n      <header>\n        <span className=\"timeline-title\">{props.title}</span>\n        <span className=\"timeline-time\">{props.time}</span>\n      </header>\n      {props.description}\n    </article>\n  </li>\n)\n\nconst getNewPosition = (events: InternalEventProps[]): EventPosition => pipe (\n  head (events),\n  O.map (flow (\n    prop ('position'),\n    position => position === 'right' ? 'left' : 'right'\n  )),\n  O.getOrElse (() => 'right' as EventPosition)\n)\n\nconst getNewKey = (events: InternalEventProps[]): number => pipe (\n  head (events),\n  O.map (flow (\n    prop ('key'),\n    add (1)\n  )),\n  O.getOrElse(() => 0)\n)\n\ntype EventPosition = 'left' | 'right'\n\ninterface EventsHookProps {\n  initial?: EventProps\n  max?: number\n}\n\ninterface InternalEventProps extends EventProps {\n  position: EventPosition\n  key: number\n  popIn?: boolean\n}\n\ninterface TimelineProps {\n  events: InternalEventProps[]\n  max?: number\n  className?: string\n}\n","import * as t from 'io-ts'\nimport {EventProps} from './Timeline'\nimport {Fetcher} from 'fetcher-ts'\n\nexport const getPlaceholderEvent = async (): Promise<EventProps> => {\n  const {author, content} = await getQuote ()\n  return {\n    time: getCurrentTime (),\n    title: author,\n    description: content\n  }\n}\n\nexport const getCurrentTime = () => new Date ().toLocaleTimeString ()\n\n///////////////////////////////////////////////////////////////////////////////\n\ntype ValidResponse = {code: 200, payload: Quote}\n\nconst getQuote = async () => {\n  const endpoint = 'https://api.quotable.io/random'\n  const [authorAndContent] =\n    await new Fetcher <ValidResponse, AuthorAndContent> (endpoint)\n      .handle (200, ({author, content}) => ({author, content}))\n      .discardRest (() => ({\n        author: \"An error occurred.\",\n        content: \"This quote couldn't be retrieved.\"\n      }))\n      .run ()\n\n  return authorAndContent\n}\n\nconst authorAndContent = t.type ({\n  author: t.string,\n  content: t.string,\n})\n\nconst quote = t.intersection ([authorAndContent, t.type ({\n  _id: t.string,\n  tags: t.array (t.string),\n  authorSlug: t.string,\n  length: t.number,\n  dateAdded: t.string,\n  dateModified: t.string\n})])\n\ntype AuthorAndContent = t.TypeOf<typeof authorAndContent>\n\ntype Quote = t.TypeOf<typeof quote>\n","import {useEffect} from 'react'\nimport {Timeline, useTimelineEvents} from './Timeline/'\nimport {getCurrentTime, getPlaceholderEvent} from './Timeline/placeholderEvents'\n\nexport const App = () => {\n  const [events, addEvent] = useTimelineEvents ({initial: {\n    time: getCurrentTime (),\n    title: 'Tam',\n    description: 'This is the first event. The next one will appear in 20s!'\n  }})\n\n  useEffect (() => {\n    const updateEvts = async () => addEvent (await getPlaceholderEvent ())\n    const interval   = setInterval (updateEvts, 4000)\n    return () => clearInterval (interval)\n  })\n\n  return (\n    <main style={{maxWidth: 1100, margin: 'auto'}}>\n      <Timeline events={events}/>\n    </main>\n  )\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport {App} from './App'\n\nReactDOM.render (\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}